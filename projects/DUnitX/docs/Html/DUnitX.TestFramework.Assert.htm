<!DOCTYPE html>
<html>
<head>
<title>Assert Class</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<meta name="generator" content="Documentation Insight" />
<!--Generated by Documentation Insight (http://www.devjetsoftware.com/). -->
<base target="_self" />
<link type="text/css" rel="Stylesheet" href="css/presentation.css" /> 
    <script type="text/javascript" src="js/jquery.min.js"></script>
    <script type="text/javascript" src="js/jquery.cookie.js"></script>
    <script type="text/javascript" src="js/di.js"></script>
  
    <script type="text/javascript" src="js/jquery-migrate.min.js"></script>
    <!--[if (!IE) | (gt IE 8)]><!-->
    <link type='text/css' rel='Stylesheet' href='css/highlighter.css' />
    <!--<![endif]-->
    <!--[if (!IE) | (gt IE 8)]><!-->
    <script src="js/highlight.min.js"></script>
    <!--<![endif]-->
 <script type="text/javascript"> 
      if (($.browser.msie == undefined) || ($.browser.version > 8)) {
        hljs.tabReplace = '  ';
        $(document).ready(function() {
          $('pre').each(function(i, e) {
            hljs.highlightBlock(e);
          });
        });
      }
           </script><script type="text/javascript">
if (top.frames.length == 0)
{
var topicUrl = top.location.href.substring(top.location.href.lastIndexOf("/") + 1, top.location.href.length);
var regex = new RegExp('(mk:@MSITStore|ms-help):?', 'i')
if(!top.location.href.match(regex)) {
	 top.location.href = "index.htm?" + topicUrl;
}}
else if (top && top.navigationFrame && top.navigationFrame.selectTocItem)
{
top.navigationFrame.selectTocItem("DUnitX.TestFramework.Assert");
};
</script>
</head>
<body class="library">
<input type="hidden" id="contentEditableControl" class="userDataStyle" value="false" />
<input type="hidden" id="userDataCache" class="userDataStyle" />
<input type="hidden" id="hiddenScrollOffset" />
<input type="hidden" id="moduleName" value="DUnitX.TestFramework" />
<input type="hidden" id="elementId" value="DUnitX.TestFramework.Assert" />
<div id="content">
<div class="topic">
<h1 class="title">Assert Class</h1>
<div id="mainSection">
<div id="mainBody">
<div id="summarySection" class="section">
<input class="tagName" type="hidden" value="summary" />
<div id="summaryHeader" class="sectionHeader">
<div>
<a href="javascript:void(0)" class="collapsibleAreaHref" title="Collapse">
<span class="collapsibleAreaIcon collapsibleAreaExpanding">
<!---->
</span>
<span class="collapsibleAreaTitle">Summary</span>
</a>
</div>
</div>
<div id="summaryContent" class="sectionContent" contentEditable="false">
<p>Represents type <code class="inline">Assert</code>.</p>
</div>
</div>
<strong>Namespace</strong>:  <a href="DUnitX.TestFramework.htm" title="DUnitX.TestFramework">DUnitX.TestFramework</a><br />
<div id="syntaxSection" class="section">
<div id="syntaxHeader" class="sectionHeader">
<div>
<a href="javascript:void(0)" class="collapsibleAreaHref" title="Collapse">
<span class="collapsibleAreaIcon collapsibleAreaExpanding">
<!---->
</span>
<span class="collapsibleAreaTitle">Syntax</span>
</a>
</div>
</div>
<div id="syntaxContent" class="sectionContent" contentEditable="false">
<div class="codeSnippet" contentEditable="false"><input class="code" type="hidden" value="" /><div class="codeSnippetTabs"><div class="codeSnippetTabActive"><a>Delphi</a></div></div><div class="codeSnippetCodeContainer"><div class="codeSnippetCode"><pre class="delphi" contentEditable="false">type
 Assert = class
 end;
</pre></div></div></div>
</div>
</div>
<p>
        The Assert type exposes the following members.
      </p>
<div id="IDFASHHG3EJP2VBYNECOYQWHFFFJSection" class="section">
<div id="IDFASHHG3EJP2VBYNECOYQWHFFFJHeader" class="sectionHeader">
<div>
<a href="javascript:void(0)" class="collapsibleAreaHref" title="Collapse">
<span class="collapsibleAreaIcon collapsibleAreaExpanding">
<!---->
</span>
<span class="collapsibleAreaTitle">Methods</span>
</a>
</div>
</div>
<div id="IDFASHHG3EJP2VBYNECOYQWHFFFJContent" class="sectionContent" contentEditable="false">
<div class="tableSection"><div class="libraryMemberFilter"><div class="filterContainer"><span class="FocusMe">Show: </span><label><input type="checkbox" class="libraryFilterInherited" checked="checked" value="Inherit" />Inherited
                </label><label><input type="checkbox" class="libraryFilterProtected" checked="checked" value="Protected" />Protected
                </label></div></div><table id="IDFASHHG3EJP2VBYNECOYQWHFFFJ"><colgroup><col width="60px" /><col width="20%" /></colgroup><tbody><tr><th class="iconColumn"> </th><th class="nameColumn">Name</th><th class="descriptionColumn">Description</th></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,Extended,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,Extended,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,Extended,string).htm" title="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,Extended,string)">AreEqual(Extended,Extended,Extended,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,Extended,string)"><p>Overloaded. Represents method <code class="inline">AreEqual(Extended,Extended,Extended,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,string).htm" title="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,string)">AreEqual(Extended,Extended,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual(Extended,Extended,string)"><p>Overloaded. Represents method <code class="inline">AreEqual(Extended,Extended,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual(Integer,Integer,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual(Integer,Integer,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(Integer,Integer,string).htm" title="DUnitX.TestFramework.Assert.AreEqual(Integer,Integer,string)">AreEqual(Integer,Integer,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual(Integer,Integer,string)"><p>Overloaded. Represents method <code class="inline">AreEqual(Integer,Integer,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual(string,string,boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual(string,string,boolean,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(string,string,boolean,string).htm" title="DUnitX.TestFramework.Assert.AreEqual(string,string,boolean,string)">AreEqual(string,string,boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual(string,string,boolean,string)"><p>Overloaded. Represents method <code class="inline">AreEqual(string,string,boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual(string,string,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual(string,string,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(string,string,string).htm" title="DUnitX.TestFramework.Assert.AreEqual(string,string,string)">AreEqual(string,string,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual(string,string,string)"><p>Overloaded. Represents method <code class="inline">AreEqual(string,string,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual(TClass,TClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual(TClass,TClass,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(TClass,TClass,string).htm" title="DUnitX.TestFramework.Assert.AreEqual(TClass,TClass,string)">AreEqual(TClass,TClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual(TClass,TClass,string)"><p>Overloaded. Represents method <code class="inline">AreEqual(TClass,TClass,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqual``1(``0,``0,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqual``1(``0,``0,string)" /><a href="DUnitX.TestFramework.Assert.AreEqual(T)(T,T,string).htm" title="DUnitX.TestFramework.Assert.AreEqual&lt;T&gt;(T,T,string)">AreEqual&lt;T&gt;(T,T,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqual``1(``0,``0,string)"><p>Overloaded. Represents method <code class="inline">AreEqual&lt;T&gt;(T,T,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreEqualMemory(Pointer,Pointer,Cardinal,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreEqualMemory(Pointer,Pointer,Cardinal,string)" /><a href="DUnitX.TestFramework.Assert.AreEqualMemory.htm" title="DUnitX.TestFramework.Assert.AreEqualMemory(Pointer,Pointer,Cardinal,string)">AreEqualMemory(Pointer,Pointer,Cardinal,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreEqualMemory(Pointer,Pointer,Cardinal,string)"><p>Represents method <code class="inline">AreEqualMemory(Pointer,Pointer,Cardinal,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotEqual(Extended,Extended,Extended,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotEqual(Extended,Extended,Extended,string)" /><a href="DUnitX.TestFramework.Assert.AreNotEqual(Extended,Extended,Extended,string).htm" title="DUnitX.TestFramework.Assert.AreNotEqual(Extended,Extended,Extended,string)">AreNotEqual(Extended,Extended,Extended,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotEqual(Extended,Extended,Extended,string)"><p>Overloaded. Represents method <code class="inline">AreNotEqual(Extended,Extended,Extended,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotEqual(string,string,boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotEqual(string,string,boolean,string)" /><a href="DUnitX.TestFramework.Assert.AreNotEqual(string,string,boolean,string).htm" title="DUnitX.TestFramework.Assert.AreNotEqual(string,string,boolean,string)">AreNotEqual(string,string,boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotEqual(string,string,boolean,string)"><p>Overloaded. Represents method <code class="inline">AreNotEqual(string,string,boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotEqual(TClass,TClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotEqual(TClass,TClass,string)" /><a href="DUnitX.TestFramework.Assert.AreNotEqual(TClass,TClass,string).htm" title="DUnitX.TestFramework.Assert.AreNotEqual(TClass,TClass,string)">AreNotEqual(TClass,TClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotEqual(TClass,TClass,string)"><p>Overloaded. Represents method <code class="inline">AreNotEqual(TClass,TClass,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotEqual``1(``0,``0,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotEqual``1(``0,``0,string)" /><a href="DUnitX.TestFramework.Assert.AreNotEqual(T)(T,T,string).htm" title="DUnitX.TestFramework.Assert.AreNotEqual&lt;T&gt;(T,T,string)">AreNotEqual&lt;T&gt;(T,T,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotEqual``1(``0,``0,string)"><p>Overloaded. Represents method <code class="inline">AreNotEqual&lt;T&gt;(T,T,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotEqualMemory(Pointer,Pointer,Cardinal,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotEqualMemory(Pointer,Pointer,Cardinal,string)" /><a href="DUnitX.TestFramework.Assert.AreNotEqualMemory.htm" title="DUnitX.TestFramework.Assert.AreNotEqualMemory(Pointer,Pointer,Cardinal,string)">AreNotEqualMemory(Pointer,Pointer,Cardinal,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotEqualMemory(Pointer,Pointer,Cardinal,string)"><p>Represents method <code class="inline">AreNotEqualMemory(Pointer,Pointer,Cardinal,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotSame(IInterface,IInterface,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotSame(IInterface,IInterface,string)" /><a href="DUnitX.TestFramework.Assert.AreNotSame(IInterface,IInterface,string).htm" title="DUnitX.TestFramework.Assert.AreNotSame(IInterface,IInterface,string)">AreNotSame(IInterface,IInterface,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotSame(IInterface,IInterface,string)"><p>Overloaded. Represents method <code class="inline">AreNotSame(IInterface,IInterface,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreNotSame(TObject,TObject,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreNotSame(TObject,TObject,string)" /><a href="DUnitX.TestFramework.Assert.AreNotSame(TObject,TObject,string).htm" title="DUnitX.TestFramework.Assert.AreNotSame(TObject,TObject,string)">AreNotSame(TObject,TObject,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreNotSame(TObject,TObject,string)"><p>Overloaded. Represents method <code class="inline">AreNotSame(TObject,TObject,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreSame(IInterface,IInterface,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreSame(IInterface,IInterface,string)" /><a href="DUnitX.TestFramework.Assert.AreSame(IInterface,IInterface,string).htm" title="DUnitX.TestFramework.Assert.AreSame(IInterface,IInterface,string)">AreSame(IInterface,IInterface,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreSame(IInterface,IInterface,string)"><p>Overloaded. Represents method <code class="inline">AreSame(IInterface,IInterface,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.AreSame(TObject,TObject,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.AreSame(TObject,TObject,string)" /><a href="DUnitX.TestFramework.Assert.AreSame(TObject,TObject,string).htm" title="DUnitX.TestFramework.Assert.AreSame(TObject,TObject,string)">AreSame(TObject,TObject,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.AreSame(TObject,TObject,string)"><p>Overloaded. Represents method <code class="inline">AreSame(TObject,TObject,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.Contains(string,string,boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.Contains(string,string,boolean,string)" /><a href="DUnitX.TestFramework.Assert.Contains(string,string,boolean,string).htm" title="DUnitX.TestFramework.Assert.Contains(string,string,boolean,string)">Contains(string,string,boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.Contains(string,string,boolean,string)"><p>Overloaded. Represents method <code class="inline">Contains(string,string,boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.Contains``1(IEnumerable{``0},``0,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.Contains``1(IEnumerable{``0},``0,string)" /><a href="DUnitX.TestFramework.Assert.Contains(T)(IEnumerable(T),T,string).htm" title="DUnitX.TestFramework.Assert.Contains&lt;T&gt;(IEnumerable&lt;T&gt;,T,string)">Contains&lt;T&gt;(IEnumerable&lt;T&gt;,T,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.Contains``1(IEnumerable{``0},``0,string)"><p>Overloaded. Represents method <code class="inline">Contains&lt;T&gt;(IEnumerable&lt;T&gt;,T,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.DoesNotContain``1(IEnumerable{``0},``0,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.DoesNotContain``1(IEnumerable{``0},``0,string)" /><a href="DUnitX.TestFramework.Assert.DoesNotContain(T)(IEnumerable(T),T,string).htm" title="DUnitX.TestFramework.Assert.DoesNotContain&lt;T&gt;(IEnumerable&lt;T&gt;,T,string)">DoesNotContain&lt;T&gt;(IEnumerable&lt;T&gt;,T,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.DoesNotContain``1(IEnumerable{``0},``0,string)"><p>Overloaded. Represents method <code class="inline">DoesNotContain&lt;T&gt;(IEnumerable&lt;T&gt;,T,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.EndsWith(string,string,boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.EndsWith(string,string,boolean,string)" /><a href="DUnitX.TestFramework.Assert.EndsWith.htm" title="DUnitX.TestFramework.Assert.EndsWith(string,string,boolean,string)">EndsWith(string,string,boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.EndsWith(string,string,boolean,string)"><p>Represents method <code class="inline">EndsWith(string,string,boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.Fail(string,pointer)"><input type="hidden" value="DUnitX.TestFramework.Assert.Fail(string,pointer)" /><a href="DUnitX.TestFramework.Assert.Fail.htm" title="DUnitX.TestFramework.Assert.Fail(string,pointer)">Fail(string,pointer)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.Fail(string,pointer)"><p>Represents method <code class="inline">Fail(string,pointer)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.InheritsFrom(TClass,TClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.InheritsFrom(TClass,TClass,string)" /><a href="DUnitX.TestFramework.Assert.InheritsFrom.htm" title="DUnitX.TestFramework.Assert.InheritsFrom(TClass,TClass,string)">InheritsFrom(TClass,TClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.InheritsFrom(TClass,TClass,string)"><p>Represents method <code class="inline">InheritsFrom(TClass,TClass,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsEmpty(IInterfaceList,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsEmpty(IInterfaceList,string)" /><a href="DUnitX.TestFramework.Assert.IsEmpty(IInterfaceList,string).htm" title="DUnitX.TestFramework.Assert.IsEmpty(IInterfaceList,string)">IsEmpty(IInterfaceList,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsEmpty(IInterfaceList,string)"><p>Overloaded. Represents method <code class="inline">IsEmpty(IInterfaceList,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsEmpty(string,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsEmpty(string,string)" /><a href="DUnitX.TestFramework.Assert.IsEmpty(string,string).htm" title="DUnitX.TestFramework.Assert.IsEmpty(string,string)">IsEmpty(string,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsEmpty(string,string)"><p>Overloaded. Represents method <code class="inline">IsEmpty(string,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsEmpty(TList,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsEmpty(TList,string)" /><a href="DUnitX.TestFramework.Assert.IsEmpty(TList,string).htm" title="DUnitX.TestFramework.Assert.IsEmpty(TList,string)">IsEmpty(TList,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsEmpty(TList,string)"><p>Overloaded. Represents method <code class="inline">IsEmpty(TList,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsEmpty(TStrings,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsEmpty(TStrings,string)" /><a href="DUnitX.TestFramework.Assert.IsEmpty(TStrings,string).htm" title="DUnitX.TestFramework.Assert.IsEmpty(TStrings,string)">IsEmpty(TStrings,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsEmpty(TStrings,string)"><p>Overloaded. Represents method <code class="inline">IsEmpty(TStrings,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsEmpty(Variant,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsEmpty(Variant,string)" /><a href="DUnitX.TestFramework.Assert.IsEmpty(Variant,string).htm" title="DUnitX.TestFramework.Assert.IsEmpty(Variant,string)">IsEmpty(Variant,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsEmpty(Variant,string)"><p>Overloaded. Represents method <code class="inline">IsEmpty(Variant,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsEmpty``1(IEnumerable{``0},string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsEmpty``1(IEnumerable{``0},string)" /><a href="DUnitX.TestFramework.Assert.IsEmpty(T)(IEnumerable(T),string).htm" title="DUnitX.TestFramework.Assert.IsEmpty&lt;T&gt;(IEnumerable&lt;T&gt;,string)">IsEmpty&lt;T&gt;(IEnumerable&lt;T&gt;,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsEmpty``1(IEnumerable{``0},string)"><p>Overloaded. Represents method <code class="inline">IsEmpty&lt;T&gt;(IEnumerable&lt;T&gt;,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsFalse(boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsFalse(boolean,string)" /><a href="DUnitX.TestFramework.Assert.IsFalse.htm" title="DUnitX.TestFramework.Assert.IsFalse(boolean,string)">IsFalse(boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsFalse(boolean,string)"><p>Represents method <code class="inline">IsFalse(boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsMatch(string,string,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsMatch(string,string,string)" /><a href="DUnitX.TestFramework.Assert.IsMatch.htm" title="DUnitX.TestFramework.Assert.IsMatch(string,string,string)">IsMatch(string,string,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsMatch(string,string,string)"><p>Represents method <code class="inline">IsMatch(string,string,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(IInterfaceList,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotEmpty(IInterfaceList,string)" /><a href="DUnitX.TestFramework.Assert.IsNotEmpty(IInterfaceList,string).htm" title="DUnitX.TestFramework.Assert.IsNotEmpty(IInterfaceList,string)">IsNotEmpty(IInterfaceList,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(IInterfaceList,string)"><p>Overloaded. Represents method <code class="inline">IsNotEmpty(IInterfaceList,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(string,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotEmpty(string,string)" /><a href="DUnitX.TestFramework.Assert.IsNotEmpty(string,string).htm" title="DUnitX.TestFramework.Assert.IsNotEmpty(string,string)">IsNotEmpty(string,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(string,string)"><p>Overloaded. Represents method <code class="inline">IsNotEmpty(string,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(TList,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotEmpty(TList,string)" /><a href="DUnitX.TestFramework.Assert.IsNotEmpty(TList,string).htm" title="DUnitX.TestFramework.Assert.IsNotEmpty(TList,string)">IsNotEmpty(TList,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(TList,string)"><p>Overloaded. Represents method <code class="inline">IsNotEmpty(TList,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(TStrings,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotEmpty(TStrings,string)" /><a href="DUnitX.TestFramework.Assert.IsNotEmpty(TStrings,string).htm" title="DUnitX.TestFramework.Assert.IsNotEmpty(TStrings,string)">IsNotEmpty(TStrings,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(TStrings,string)"><p>Overloaded. Represents method <code class="inline">IsNotEmpty(TStrings,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(Variant,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotEmpty(Variant,string)" /><a href="DUnitX.TestFramework.Assert.IsNotEmpty(Variant,string).htm" title="DUnitX.TestFramework.Assert.IsNotEmpty(Variant,string)">IsNotEmpty(Variant,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotEmpty(Variant,string)"><p>Overloaded. Represents method <code class="inline">IsNotEmpty(Variant,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotEmpty``1(IEnumerable{``0},string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotEmpty``1(IEnumerable{``0},string)" /><a href="DUnitX.TestFramework.Assert.IsNotEmpty(T)(IEnumerable(T),string).htm" title="DUnitX.TestFramework.Assert.IsNotEmpty&lt;T&gt;(IEnumerable&lt;T&gt;,string)">IsNotEmpty&lt;T&gt;(IEnumerable&lt;T&gt;,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotEmpty``1(IEnumerable{``0},string)"><p>Overloaded. Represents method <code class="inline">IsNotEmpty&lt;T&gt;(IEnumerable&lt;T&gt;,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotNull(IInterface,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotNull(IInterface,string)" /><a href="DUnitX.TestFramework.Assert.IsNotNull(IInterface,string).htm" title="DUnitX.TestFramework.Assert.IsNotNull(IInterface,string)">IsNotNull(IInterface,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotNull(IInterface,string)"><p>Overloaded. Represents method <code class="inline">IsNotNull(IInterface,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotNull(Pointer,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotNull(Pointer,string)" /><a href="DUnitX.TestFramework.Assert.IsNotNull(Pointer,string).htm" title="DUnitX.TestFramework.Assert.IsNotNull(Pointer,string)">IsNotNull(Pointer,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotNull(Pointer,string)"><p>Overloaded. Represents method <code class="inline">IsNotNull(Pointer,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotNull(TObject,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotNull(TObject,string)" /><a href="DUnitX.TestFramework.Assert.IsNotNull(TObject,string).htm" title="DUnitX.TestFramework.Assert.IsNotNull(TObject,string)">IsNotNull(TObject,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotNull(TObject,string)"><p>Overloaded. Represents method <code class="inline">IsNotNull(TObject,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNotNull(Variant,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNotNull(Variant,string)" /><a href="DUnitX.TestFramework.Assert.IsNotNull(Variant,string).htm" title="DUnitX.TestFramework.Assert.IsNotNull(Variant,string)">IsNotNull(Variant,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNotNull(Variant,string)"><p>Overloaded. Represents method <code class="inline">IsNotNull(Variant,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNull(IInterface,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNull(IInterface,string)" /><a href="DUnitX.TestFramework.Assert.IsNull(IInterface,string).htm" title="DUnitX.TestFramework.Assert.IsNull(IInterface,string)">IsNull(IInterface,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNull(IInterface,string)"><p>Overloaded. Represents method <code class="inline">IsNull(IInterface,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNull(Pointer,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNull(Pointer,string)" /><a href="DUnitX.TestFramework.Assert.IsNull(Pointer,string).htm" title="DUnitX.TestFramework.Assert.IsNull(Pointer,string)">IsNull(Pointer,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNull(Pointer,string)"><p>Overloaded. Represents method <code class="inline">IsNull(Pointer,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNull(TObject,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNull(TObject,string)" /><a href="DUnitX.TestFramework.Assert.IsNull(TObject,string).htm" title="DUnitX.TestFramework.Assert.IsNull(TObject,string)">IsNull(TObject,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNull(TObject,string)"><p>Overloaded. Represents method <code class="inline">IsNull(TObject,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsNull(Variant,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsNull(Variant,string)" /><a href="DUnitX.TestFramework.Assert.IsNull(Variant,string).htm" title="DUnitX.TestFramework.Assert.IsNull(Variant,string)">IsNull(Variant,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsNull(Variant,string)"><p>Overloaded. Represents method <code class="inline">IsNull(Variant,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsTrue(boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsTrue(boolean,string)" /><a href="DUnitX.TestFramework.Assert.IsTrue.htm" title="DUnitX.TestFramework.Assert.IsTrue(boolean,string)">IsTrue(boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsTrue(boolean,string)"><p>Represents method <code class="inline">IsTrue(boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.IsType``1(``0,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.IsType``1(``0,string)" /><a href="DUnitX.TestFramework.Assert.IsType(T)(T,string).htm" title="DUnitX.TestFramework.Assert.IsType&lt;T&gt;(T,string)">IsType&lt;T&gt;(T,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.IsType``1(``0,string)"><p>Overloaded. Represents method <code class="inline">IsType&lt;T&gt;(T,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.Pass(string)"><input type="hidden" value="DUnitX.TestFramework.Assert.Pass(string)" /><a href="DUnitX.TestFramework.Assert.Pass.htm" title="DUnitX.TestFramework.Assert.Pass(string)">Pass(string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.Pass(string)"><p>Represents method <code class="inline">Pass(string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.StartsWith(string,string,boolean,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.StartsWith(string,string,boolean,string)" /><a href="DUnitX.TestFramework.Assert.StartsWith.htm" title="DUnitX.TestFramework.Assert.StartsWith(string,string,boolean,string)">StartsWith(string,string,boolean,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.StartsWith(string,string,boolean,string)"><p>Represents method <code class="inline">StartsWith(string,string,boolean,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.WillNotRaise(TTestLocalMethod,ExceptClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.WillNotRaise(TTestLocalMethod,ExceptClass,string)" /><a href="DUnitX.TestFramework.Assert.WillNotRaise(TTestLocalMethod,ExceptClass,string).htm" title="DUnitX.TestFramework.Assert.WillNotRaise(TTestLocalMethod,ExceptClass,string)">WillNotRaise(TTestLocalMethod,ExceptClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.WillNotRaise(TTestLocalMethod,ExceptClass,string)"><p>Overloaded. Represents method <code class="inline">WillNotRaise(TTestLocalMethod,ExceptClass,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.WillNotRaise(TTestMethod,ExceptClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.WillNotRaise(TTestMethod,ExceptClass,string)" /><a href="DUnitX.TestFramework.Assert.WillNotRaise(TTestMethod,ExceptClass,string).htm" title="DUnitX.TestFramework.Assert.WillNotRaise(TTestMethod,ExceptClass,string)">WillNotRaise(TTestMethod,ExceptClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.WillNotRaise(TTestMethod,ExceptClass,string)"><p>Overloaded. Represents method <code class="inline">WillNotRaise(TTestMethod,ExceptClass,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.WillRaise(TTestLocalMethod,ExceptClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.WillRaise(TTestLocalMethod,ExceptClass,string)" /><a href="DUnitX.TestFramework.Assert.WillRaise(TTestLocalMethod,ExceptClass,string).htm" title="DUnitX.TestFramework.Assert.WillRaise(TTestLocalMethod,ExceptClass,string)">WillRaise(TTestLocalMethod,ExceptClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.WillRaise(TTestLocalMethod,ExceptClass,string)"><p>Overloaded. Represents method <code class="inline">WillRaise(TTestLocalMethod,ExceptClass,string)</code>.</p></div></td></tr><tr class="member"><td><img src="images/pubmethod.gif" title="public method" /><img src="images/static.gif" title="Class member" /></td><td class="memberId" data-id="DUnitX.TestFramework.Assert.WillRaise(TTestMethod,ExceptClass,string)"><input type="hidden" value="DUnitX.TestFramework.Assert.WillRaise(TTestMethod,ExceptClass,string)" /><a href="DUnitX.TestFramework.Assert.WillRaise(TTestMethod,ExceptClass,string).htm" title="DUnitX.TestFramework.Assert.WillRaise(TTestMethod,ExceptClass,string)">WillRaise(TTestMethod,ExceptClass,string)</a></td><td><div class="memberSummary" data-id="DUnitX.TestFramework.Assert.WillRaise(TTestMethod,ExceptClass,string)"><p>Overloaded. Represents method <code class="inline">WillRaise(TTestMethod,ExceptClass,string)</code>.</p></div></td></tr></tbody></table><a href="#mainBody">Top</a></div>
</div>
</div>
<div id="seealsoSection" class="section">
<input class="tagName" type="hidden" value="seealso" />
<div id="seealsoHeader" class="sectionHeader">
<div>
<a href="javascript:void(0)" class="collapsibleAreaHref" title="Collapse">
<span class="collapsibleAreaIcon collapsibleAreaExpanding">
<!---->
</span>
<span class="collapsibleAreaTitle">See Also</span>
</a>
</div>
</div>
<div id="seealsoContent" class="sectionContent" contentEditable="false">
<h4 class="subHeading">Reference</h4><ul class="seeAlsoCodeReference"><li><a href="DUnitX.TestFramework.htm" title="DUnitX.TestFramework">DUnitX.TestFramework</a></li></ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footerContent">Documentation Powered by <a href="http://www.devjetsoftware.com/products/documentation-insight/" target="_blank">Documentation Insight</a></div>
</div>
</body>
</html>
